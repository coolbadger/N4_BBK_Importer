/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.LWT.ImporterUI;

import com.LWT.Base.GlobalLogger;
import com.LWT.Logger.MyLoggerListener;
import com.LWT.Main.MyThread;

/**
 * @author Badger
 */
public class MainFrame extends javax.swing.JFrame {

    private MainFrameInfo frameParameter;

    //定义处理线程
    MyThread processThread;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        frameParameter = new MainFrameInfo();
        initComponents();
        customerInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        envSelectGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        testEnvSelection = new javax.swing.JRadioButton();
        realEnvSelection = new javax.swing.JRadioButton();
        exeImporter = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        checkDataArea = new javax.swing.JCheckBox();
        checkCountArea = new javax.swing.JCheckBox();
        dateStart = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        dateEnd = new javax.swing.JTextField();
        unitCount = new javax.swing.JTextField();
        isWriteBack = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outMsg = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        testEnvSelection.setSelected(true);
        testEnvSelection.setText("测试环境");
        testEnvSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testEnvSelectionActionPerformed(evt);
            }
        });

        realEnvSelection.setText("正式环境");
        realEnvSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realEnvSelectionActionPerformed(evt);
            }
        });

        exeImporter.setText("执行导入");
        exeImporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exeImporterActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("设置"));

        checkDataArea.setText("指定日期范围");
        checkDataArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDataAreaActionPerformed(evt);
            }
        });

        checkCountArea.setText("指定条目数");
        checkCountArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCountAreaActionPerformed(evt);
            }
        });

        dateStart.setEnabled(false);

        jLabel1.setText("-");

        dateEnd.setEnabled(false);

        unitCount.setEnabled(false);



        isWriteBack.setText("回写数据库");
        isWriteBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isWriteBackActionPerformed(evt);
            }
        });

        isWriteBack.setEnabled(false);
        isWriteBack.setSelected(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(checkDataArea, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                        .addComponent(checkCountArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(dateStart, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(unitCount, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(isWriteBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(checkDataArea)
                                        .addComponent(dateStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1)
                                        .addComponent(dateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(checkCountArea)
                                        .addComponent(unitCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(isWriteBack)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "输出明细"));

        outMsg.setEditable(false);
        outMsg.setColumns(20);
        outMsg.setRows(5);
        jScrollPane1.setViewportView(outMsg);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(testEnvSelection)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(realEnvSelection)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(exeImporter, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(testEnvSelection)
                                        .addComponent(realEnvSelection)
                                        .addComponent(exeImporter))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void customerInit() {
        envSelectGroup.add(testEnvSelection);
        envSelectGroup.add(realEnvSelection);
        unitCount.setDocument(new MainFrameInfo.IntNumberDocument());
        dateStart.setDocument(new MainFrameInfo.IntDateDocument());
        dateEnd.setDocument(new MainFrameInfo.IntDateDocument());

        GlobalLogger.myLogger.addListener(new MyLoggerListener() {
            @Override
            public void LogInfo(String logInfo) {
                String outStr = logInfo;
                outMsg.append(outStr);
                int length = outMsg.getText().length();
                outMsg.setCaretPosition(length);
//                System.out.print(outStr);
                if (outStr.contains("****end****")) {
                    exeImporter.setText("执行导入");
                }
            }

            @Override
            public void LogError(String logError) {
                String outStr = "Error:" + logError + "\n";
                outMsg.append(outStr);
                int length = outMsg.getText().length();
                outMsg.setCaretPosition(length);
            }
        });
    }

    private void getFrameState() {
        frameParameter.p_IsTestEnv = testEnvSelection.isSelected();
        frameParameter.p_IsWriteBack = isWriteBack.isSelected();
        frameParameter.p_IsUnitCount = checkCountArea.isSelected();
        frameParameter.p_IsDateEnable = checkDataArea.isSelected();

        frameParameter.p_DateEnd = dateEnd.getText();
        frameParameter.p_DateStart = dateStart.getText();
        frameParameter.p_UnitCount = unitCount.getText();

    }

    //根据当前界面选择情况，刷新界面选项
    private void setFrameState() {
        setFrameState(true);
    }

    private void setFrameState(boolean isDefault) {
        if (isDefault) {
            getFrameState();
        } else {
            isWriteBack.setSelected(frameParameter.p_IsWriteBack);
        }

        unitCount.setEnabled(frameParameter.p_IsUnitCount);
        frameParameter.p_UnitCount = frameParameter.p_IsUnitCount ? unitCount.getText() : "";

        dateStart.setEnabled(frameParameter.p_IsDateEnable);
        dateEnd.setEnabled(frameParameter.p_IsDateEnable);
        frameParameter.p_DateStart = frameParameter.p_IsDateEnable ? dateStart.getText() : "";
        frameParameter.p_DateEnd = frameParameter.p_IsDateEnable ? dateEnd.getText() : "";


        if (frameParameter.p_IsTestEnv){
            isWriteBack.setEnabled(false);
            isWriteBack.setSelected(false);
        }
        else {
            isWriteBack.setEnabled(true);
        }

    }

    private void testEnvSelectionActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        getFrameState();
        frameParameter.p_IsWriteBack = false;
        setFrameState(false);
    }

    private void checkDataAreaActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        setFrameState();
    }

    private void realEnvSelectionActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        getFrameState();
        frameParameter.p_IsWriteBack = true;
        setFrameState(false);
    }

    private void checkCountAreaActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        setFrameState();
    }

    private void isWriteBackActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        setFrameState();
    }

    private void exeImporterActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        getFrameState();
//        Global.mainFrameParameter = frameParameter;
        if (exeImporter.getText().equals("执行导入")) {
            outMsg.setText("");
            processThread = new MyThread(frameParameter);
            processThread.start();
            exeImporter.setText("停止");
        } else {
            try {
                processThread.stop();
                processThread.interrupt();
            } catch (Exception e) {
            }
            outMsg.append("*****已停止*****");
            exeImporter.setText("执行导入");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JCheckBox checkCountArea;
    private javax.swing.JCheckBox checkDataArea;
    private javax.swing.JTextField dateEnd;
    private javax.swing.JTextField dateStart;
    private javax.swing.ButtonGroup envSelectGroup;
    private javax.swing.JButton exeImporter;
    private javax.swing.JCheckBox isWriteBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outMsg;
    private javax.swing.JRadioButton realEnvSelection;
    private javax.swing.JRadioButton testEnvSelection;
    private javax.swing.JTextField unitCount;
    // End of variables declaration
}
